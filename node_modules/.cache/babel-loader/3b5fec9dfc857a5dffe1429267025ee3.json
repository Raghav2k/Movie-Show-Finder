{"ast":null,"code":"var _jsxFileName = \"/Users/raghavsharma/movie-library/src/components/Results.js\";\nimport React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport './Results.css';\n\nclass Results extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      result: [],\n      loading: false,\n      appear: true\n    };\n  }\n\n  async componentDidUpdate(prevProps) {\n    if (prevProps.query !== this.props.query && prevProps.movies !== this.props.movies) {\n      var url = \"\";\n\n      if (this.props.movies) {\n        url = 'https://api.themoviedb.org/3/search/movie?api_key=4f02959b89ceb660d5b1018f517488de&query='.concat(this.props.query);\n      } else {\n        url = 'https://api.themoviedb.org/3/search/tv?api_key=4f02959b89ceb660d5b1018f517488de&language=en-US&page=1&query='.concat(this.props.query).concat('&include_adult=false');\n      }\n\n      const response = await fetch(url);\n      const data = await response.json();\n      this.setState({\n        result: data.results,\n        loading: false,\n        appear: this.props.hide\n      });\n    }\n  }\n\n  render() {\n    if (this.state.appear) {\n      return null;\n    } else {\n      if (this.state.loading || !this.state.movies) {\n        console.log('Loading');\n      }\n\n      var img_url = 'https://image.tmdb.org/t/p/w300';\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(Container, {\n        className: \"background\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(Row, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 21\n        }\n      }, this.state.result.map(movie => /*#__PURE__*/React.createElement(Col, {\n        key: movie.id,\n        className: \"Posters\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 25\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"trending\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 29\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: img_url.concat(movie.poster_path),\n        alt: \"Posters\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 33\n        }\n      })), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"MovieName\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 29\n        }\n      }, \" \", movie.name), /*#__PURE__*/React.createElement(\"p\", {\n        className: \"MovieTitle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 29\n        }\n      }, \" \", movie.title))))));\n    }\n  }\n\n}\n\n;\nexport default Results;","map":{"version":3,"sources":["/Users/raghavsharma/movie-library/src/components/Results.js"],"names":["React","Container","Row","Col","Results","Component","constructor","props","state","result","loading","appear","componentDidUpdate","prevProps","query","movies","url","concat","response","fetch","data","json","setState","results","hide","render","console","log","img_url","map","movie","id","poster_path","name","title"],"mappings":"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","sourcesContent":["import React from 'react'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport './Results.css'\n\n\nclass Results extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            result: [],\n            loading: false,\n            appear: true\n        }\n}\n\n    async componentDidUpdate(prevProps){\n        if(prevProps.query !== this.props.query && prevProps.movies !== this.props.movies){\n            var url = \"\";\n            if(this.props.movies){\n                url = 'https://api.themoviedb.org/3/search/movie?api_key=4f02959b89ceb660d5b1018f517488de&query='.concat(this.props.query);\n            }\n            else{\n                url = 'https://api.themoviedb.org/3/search/tv?api_key=4f02959b89ceb660d5b1018f517488de&language=en-US&page=1&query='.concat(this.props.query).concat('&include_adult=false');\n            }\n            const response = await fetch (url);\n            const data = await response.json();\n            this.setState({result: data.results, loading:false, appear:this.props.hide});\n        }\n    }\n\n    render(){\n        \n        if(this.state.appear){\n            return null;\n        }\n        else{\n            if(this.state.loading || !this.state.movies){\n                console.log('Loading');\n            }\n            var img_url = 'https://image.tmdb.org/t/p/w300';\n            return(\n\n                <div>\n                    <Container className = 'background'>\n                    <Row>\n                    {this.state.result.map(movie => (\n                        <Col key = {movie.id} className = 'Posters'> \n                            <button className = 'trending'>\n                                <img  src = {img_url.concat(movie.poster_path)} alt = 'Posters' /> \n                            </button>\n                            <p className = 'MovieName'> {movie.name}</p>\n                            <p className = 'MovieTitle'> {movie.title}</p>\n                        </Col>\n                    ))}\n                    </Row>\n                </Container>\n\n                </div>\n\n            )\n        }\n    }\n};\n\nexport default Results;"]},"metadata":{},"sourceType":"module"}